/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var I=Object.create;var m=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var S=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty;var _=(i,n)=>()=>(n||i((n={exports:{}}).exports,n),n.exports),W=(i,n)=>{for(var e in n)m(i,e,{get:n[e],enumerable:!0})},E=(i,n,e,a)=>{if(n&&typeof n=="object"||typeof n=="function")for(let t of F(n))!O.call(i,t)&&t!==e&&m(i,t,{get:()=>n[t],enumerable:!(a=V(n,t))||a.enumerable});return i};var U=(i,n,e)=>(e=i!=null?I(S(i)):{},E(n||!i||!i.__esModule?m(e,"default",{value:i,enumerable:!0}):e,i)),K=i=>E(m({},"__esModule",{value:!0}),i);var k=_(w=>{"use strict";Object.defineProperty(w,"__esModule",{value:!0});require("obsidian");var j=i=>{var n;return i?(n=i.plugins.plugins.dataview)===null||n===void 0?void 0:n.api:window.DataviewAPI},z=i=>i.plugins.enabledPlugins.has("dataview");w.getAPI=j;w.isPluginEnabled=z});var B={};W(B,{DEFAULT_DATA:()=>L,DEFAULT_SETTINGS:()=>C,default:()=>b});module.exports=K(B);var T=require("obsidian"),h=U(k());var f=require("obsidian");var P=require("obsidian"),N="recently-modidied-notes-icon";function A(){(0,P.addIcon)(N,`<path d="M 28.765338 88.30834 
         C 7.608224 76.58076 -.03592441 49.92245 11.691656 28.7653384
         C 23.419236 7.608224 50.07755 -.03592441 71.23466 11.691656
         C 77.28012 15.042706 82.44665 19.776963 86.31185 25.50735" fill="none" stroke="currentColor" stroke-width="9" stroke-linecap="round" />
    <path d="M 27.517986 72.1223 L 50.112867 49.887133 L 45.503597 29.67626" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="9" fill="none"/>
    <path d="M 87.76221 40.087604 L 98.31476 50.747986 L 91.1663 57.82414 L 80.61375 47.163755 Z" fill="currentColor"/>
    <path d="M 77.01511 50.55255 L 87.56766 61.21293 L 63.936375 84.60518 L 53.38383 73.94479 Z" fill="currentColor"/>
    <path d="M 49.81125 77.65467 L 40.119633 97.71463 L 60.27708 88.22745 Z" fill="currentColor"/>`)}var r="recently-modified-dv",u=class extends f.ItemView{constructor(e,a,t){super(e);this.redraw=()=>{var o,v,R;console.log("DV redraw invoked on view");let e=createDiv({cls:"nav-folder mod-root"}),a=e.createDiv({cls:"nav-folder-children"});if(!this.plugin.isDvAvailable()){a.createDiv({cls:"nav-file"}).createDiv({cls:"nav-file-title"}).createDiv({cls:"nav-file-title-content",text:"Dataview plugin not available or not enabled."});let g=this.containerEl.children[1];g.empty(),g.appendChild(e);return}this.plugin.getRecentlyModifiedNotesData().isUpToDate?console.log("DV Recent redraw: data are up to date"):((o=this.plugin.getRecentlyModifiedNotesData().recentlyModifiedNotes)==null?void 0:o.length)===0||this.plugin.isAutoDataRefreshEnabled()?(console.log(`DV Recent redraw: no data ${(v=this.plugin.getRecentlyModifiedNotesData().recentlyModifiedNotes)==null?void 0:v.length} or not up to date -> REFRESHING from dv`),this.plugin.refreshRecentlyModifiedListFromDv()):console.log("DV Recent redraw: data not up to date (or empty), NOT refreshing");let t=this.app.workspace.getActiveFile();(R=this.data.recentlyModifiedNotes)==null||R.forEach(d=>{let l=a.createDiv({cls:"nav-file"}),g=l.createDiv({cls:"nav-file-title"});t&&d.path===t.path&&g.addClass("is-active"),g.createDiv({cls:"nav-file-title-content",text:d.name}),l.setAttr("draggable","true"),l.addEventListener("dragstart",s=>{let p=this.app.metadataCache.getFirstLinkpathDest(d.path,""),y=this.app.dragManager,x=y.dragFile(s,p);y.onDragStart(s,x)}),l.addEventListener("mouseover",s=>{this.app.workspace.trigger("hover-link",{event:s,source:r,hoverParent:e,targetEl:l,linktext:d.path})}),l.addEventListener("contextmenu",s=>{let p=new f.Menu,y=this.app.vault.getAbstractFileByPath(d.path);this.app.workspace.trigger("file-menu",p,y,"link-context-menu"),p.showAtPosition({x:s.clientX,y:s.clientY})}),l.addEventListener("click",s=>{let p=s.ctrlKey||s.metaKey;this.openOrFocusNote(d,p)})});let c=this.containerEl.children[1];c.empty(),c.appendChild(e)};this.openOrFocusNote=(e,a=!1)=>{var c;let t=this.app.vault.getAbstractFileByPath(e.path);if(t){let o=this.app.workspace.getMostRecentLeaf();(a||(o==null?void 0:o.getViewState().pinned))&&o&&(o=this.app.workspace.createLeafInTabGroup()),o==null||o.openFile(t)}else new f.Notice(`Cannot find note '${e.name}'`),this.data.recentlyModifiedNotes=(c=this.data.recentlyModifiedNotes)==null?void 0:c.filter(o=>o.path!==o.path),this.redraw()};this.plugin=a,this.data=t}async onOpen(){this.redraw()}getViewType(){return r}getDisplayText(){return"Recently modified notes. Click to refresh"}getIcon(){return N}onHeaderMenu(e){e.addItem(a=>{a.setTitle("Refresh list").onClick(async()=>{this.plugin.refreshRecentlyModifiedListFromDv(),this.redraw()})})}load(){super.load()}};var D=require("obsidian"),M=class extends D.PluginSettingTab{constructor(e,a){super(e,a);this.plugin=a}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Settings for Recently Modified Notes List plugin"}),new D.Setting(e).setName("Enable auto refresh").setDesc("The list of recently modified notes will be refreshed automatically upon each note change.").addToggle(a=>a.setValue(this.plugin.settings.autoRefreshEnabled).onChange(async t=>{this.plugin.settings.autoRefreshEnabled=t,t&&(this.plugin.refreshRecentlyModifiedListFromDv(),this.plugin.redrawView()),await this.plugin.saveSettings()}))}};var L={recentlyModifiedNotes:[],isUpToDate:!1},C={autoRefreshEnabled:!0},b=class extends T.Plugin{constructor(e,a,t=L){super(e,a);this.data=t;this.initView=async()=>{let e=null;for(e of this.app.workspace.getLeavesOfType(r)){if(e.view instanceof u)return;await e.setViewState({type:"empty"});break}(e!=null?e:this.app.workspace.getLeftLeaf(!1)).setViewState({type:r,active:!0})}}async onload(){var e,a;if(console.log(`Loading ${this.manifest.id}`),await this.loadSettings(),A(),this.data=L,this.registerView(r,t=>this.view=new u(t,this,this.data)),this.addCommand({id:"recently-modified-open-view",name:"Open recently modified list view",callback:async()=>{let[t]=this.app.workspace.getLeavesOfType(r);t||(t=this.app.workspace.getLeftLeaf(!1),await t.setViewState({type:r})),this.app.workspace.revealLeaf(t)}}),this.app.workspace.onLayoutReady(()=>{this.initView()}),this.dvApi=(0,h.getAPI)(this.app),this.dvApi&&(0,h.isPluginEnabled)(this.app)){let t=this.app.metadataCache;this.registerEvent(t.on("dataview:index-ready",()=>{this.data.isUpToDate=!1,console.log("DV notified - index ready")})),this.registerEvent(t.on("dataview:metadata-change",(c,o,v)=>{this.data.isUpToDate=!1,console.log("DV notified - metadata-change (also deletion, rename)")}))}else console.log("DV is not installed or not enabled!");(a=(e=this.dvApi)==null?void 0:e.index)!=null&&a.initialized?console.log("DV index is already initialized at plugin load time (the index-ready should not be received)"):console.log("DV index is NOT initialized at plugin load time (the index-ready SHOULD BE received)"),this.addSettingTab(new M(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},C,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}refreshRecentlyModifiedListFromDv(){var e;if(this.dvApi&&(0,h.isPluginEnabled)(this.app)){let a=(e=this.dvApi)==null?void 0:e.pages("-#ignore-in-recent").sort(t=>t.file.mtime,"desc").limit(30).map(t=>({path:t.file.path,name:t.file.name})).array();console.log(a),this.data.recentlyModifiedNotes=a,this.data.isUpToDate=!0}}redrawView(){var e;(e=this.view)==null||e.redraw()}isAutoDataRefreshEnabled(){return this.settings.autoRefreshEnabled}getRecentlyModifiedNotesData(){return this.data}isDvAvailable(){return!!this.dvApi&&(0,h.isPluginEnabled)(this.app)}};
